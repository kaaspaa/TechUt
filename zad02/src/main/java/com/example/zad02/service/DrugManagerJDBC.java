package com.example.zad02.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.zad02.domain.Drug;

public class DrugManagerJDBC implements DrugManager {

    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableDrug = "CREATE TABLE Person(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, yob integer)";

    private PreparedStatement addDrugStmt;
    private PreparedStatement deleteAllDrugsStmt;
    private PreparedStatement getAllDrugsStmt;

    private Statement statement;

    public DrugManagerJDBC() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Drug".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTablePerson);

            addDrugStmt = connection.prepareStatement("INSERT INTO Drug (name, producer, prize, yoe) VALUES (?, ?, ?, ?)");
            deleteAllDrugsStmt = connection.prepareStatement("DELETE FROM Drug");
            getAllDrugsStmt = connection.prepareStatement("SELECT id, name, producer, prize, yoe FROM Drug");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    void clearDrugs() {
        try {
            deleteAllDrugsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public int addDrug(Drug drug) {
        int count = 0;
        try {
            addDrugStmt.setString(1, drug.getName());
            addDrugStmt.setString(2, drug.getProducer());
            addDrugStmt.setInt(3, drug.getPrize());
            addDrugStmt.setInt(4, drug.getYoe());

            count = addDrugStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public List<Drug> getAllDrugs() {
        List<Drug> drugs = new ArrayList<Drug>();

        try {
            ResultSet rs = getAllDrugsStmt.executeQuery();

            while (rs.next()) {
                Drug d = new Person();
                d.setId(rs.getInt("id"));
                d.setName(rs.getString("name"));
                d.setProducer(rs.getString("producer"));
                d.setPrize(rs.getInt("prize"));
                d.setYoe(rs.getInt("yoe"));
                Drugs.add(d);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return drugs;
    }

    @Override
    public void addAllDrugs(List<Drug> drugs) {

        try {
            connection.setAutoCommit(false);
            for (Drugs drugs : drugs) {
                addDrugStmt.setString(1, person.getName());
                addDrugStmt.setString(2, person.getProducer());
                addDrugStmt.setInt(3, person.getPrize());
                addDrugStmt.setInt(4, person.getYoe());
                addDrugStmt.executeUpdate();
            }
            connection.commit();

        } catch (SQLException exception) {

            try {
                connection.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
                //!!!! ALARM
            }
        }

    }

}

public class Main{
	public static void Main(String[] args){
		DrugManager drg= new DrugManager();
		drg.addDrug("Ibuprom","HealSomethingCompany","12.99",2018);
		
	}
}
